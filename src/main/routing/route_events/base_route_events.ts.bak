
let _event_id_counter = 0;
interface ApplyFunc{

}

class BaseEvent {
    constructor(parent) {
        this.event_id = _event_id_counter;
        _event_id_counter += 1;
        this.parent = parent;
    }

    apply(cur_state) {
        throw new TypeError('No apply function defined');
    }

    contains_id(id_val) {
        return id_val === this.event_id;
    }

    pkmn_after_levelups(self) {
        return '';
    }

    pkmn_level(self) {
        return '';
    }

    xp_to_next_level(self) {
        return '';
    }

    percent_xp_to_next_level(self) {
        return '';
    }

    xp_gain(self) {
        return '';
    }

    total_xp_gain(self) {
        return '';
    }

    experience_per_second(self) {
        return '';
    }

    serialize(self) {
        throw new TypeError('No serialize function defined');
    }

    is_enabled(self) {
        throw new TypeError('No is_enabled function defined');
    }

    set_enabled_status(self) {
        throw new TypeError('No set_enabled_status function defined');
    }

    has_errors(self) {
        throw new TypeError('No has_errors function defined');
    }

    do_render(self, search, filter_types) {
        throw new TypeError('No do_render function defined');
    }

    get_tags(self) {
        throw new TypeError('No get_tags function defined');
    }
}
